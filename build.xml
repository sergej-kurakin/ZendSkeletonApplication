<?xml version="1.0"?>

<project name="ZendSkeletonApplication" default="main" basedir=".">

    <property name="project.vendor.bin" value="${project.basedir}/vendor/bin" />

    <target name="main" depends="release" />

    <target name="cleanup" description="Cleanup release directory">
        <delete dir="${project.basedir}/build"/>
    </target>

    <target name="release" depends="build" description="Build and release project">

    </target>

    <target name="prepare">
        <echo msg="Creating build directory: ./build"/>
        <mkdir dir="${project.basedir}/build"/>
    </target>

    <target name="build" depends="prepare">
        <echo msg="Copying source files to build directory..."/>

        <copy todir="${project.basedir}/build/config" overwrite="true">
            <fileset dir="${project.basedir}/config">
                <patternset>
                    <include name="autoload/*.php.dist"/>
                    <include name="autoload/*global.php"/>
                    <include name="autoload/README.md"/>
                    <include name="application.config.php"/>
                </patternset>
            </fileset>
        </copy>

        <mkdir dir="${project.basedir}/build/data"/>
        <mkdir dir="${project.basedir}/build/data/cache"/>
        <mkdir dir="${project.basedir}/build/data/config"/>
        <mkdir dir="${project.basedir}/build/data/log"/>

        <copy todir="${project.basedir}/build/module" overwrite="true">
            <fileset dir="${project.basedir}/module">
                <include name="**/*"/>
            </fileset>
        </copy>

        <copy todir="${project.basedir}/build/public" overwrite="true">
            <fileset dir="${project.basedir}/public">
                <patternset>
                    <include name="**/*"/>
                </patternset>
            </fileset>
        </copy>

        <copy file="${project.basedir}/LICENSE.txt" tofile="${project.basedir}/build/LICENSE.txt" overwrite="true"/>
        <copy file="${project.basedir}/init_autoloader.php" tofile="${project.basedir}/build/init_autoloader.php" overwrite="true"/>
        <copy file="${project.basedir}/composer.json" tofile="${project.basedir}/build/composer.json" overwrite="true"/>

        <echo msg="Installing vendors..."/>

        <mkdir dir="${project.basedir}/build/vendor"/>

        <exec executable="php">
            <arg value="-f" />
            <arg value="${project.basedir}/composer.phar" />
            <arg value="install" />
            <arg value="--optimize-autoloader" />
            <arg value="--working-dir" />
            <arg value="${project.basedir}/build/" />
        </exec>

    </target>

    <target name="runtests" depends="phplint,phpunit" description="Testing tasks" />

    <target name="runmetrics" depends="phploc,phpmd-ci,phpcpd,pdepend,phpcs-ci" description="Metrics tasks" />

    <target name="phplint" description="Check PHP with lint">
        <phplint haltonfailure="true">
            <fileset dir="module">
                <include name="**/*.php"/>
                <exclude name="**/tests/**" />
            </fileset>
        </phplint>
    </target>
    
    <target name="phpunit" description="Run Unit tests on project">
        <exec executable="${project.vendor.bin}/phpunit">
            <arg value="--configuration" />
            <arg path="${project.basedir}/tests/phpunit.xml" />
        </exec>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="${project.vendor.bin}/phploc">
            <arg value="--log-csv" />
            <arg value="${project.basedir}/reports/phploc.csv" />
            <arg path="${project.basedir}/build/module" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="${project.vendor.bin}/phpmd">
            <arg path="${project.basedir}/build/module" />
            <arg value="xml" />
            <arg value="cleancode,codesize,controversial,design,naming,unusedcode" />
            <arg value="--reportfile" />
            <arg value="${project.basedir}/reports/pmd.xml" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="${project.vendor.bin}/phpcpd">
            <arg value="--log-pmd" />
            <arg value="${project.basedir}/reports/pmd-cpd.xml" />
            <arg path="${project.basedir}/build/module" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="${project.vendor.bin}/pdepend">
            <arg value="--jdepend-xml=${project.basedir}/reports/jdepend.xml" />
            <arg value="--jdepend-chart=${project.basedir}/reports/dependencies.svg" />
            <arg value="--overview-pyramid=${project.basedir}/reports/overview-pyramid.svg" />
            <arg path="${project.basedir}/build/module" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="${project.vendor.bin}/phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${project.basedir}/reports/checkstyle-psr1.xml" />
            <arg value="--standard=PSR1" />
            <arg path="${project.basedir}/build/module" />
        </exec>
        <exec executable="${project.vendor.bin}/phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${project.basedir}/reports/checkstyle-pdr2.xml" />
            <arg value="--standard=PSR2" />
            <arg path="${project.basedir}/build/module" />
        </exec>
    </target>

</project>